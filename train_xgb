"""
train_xgb.py
Train XGBoost baseline (log1p target) on processed features.
Usage:
    python train_xgb.py --train processed/train_features.csv --test processed/test_features.csv --out_dir outputs
"""
import argparse, os
import numpy as np, pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

try:
    import xgboost as xgb
except Exception as e:
    xgb = None
    print('XGBoost not installed. Install via pip install xgboost')

def rmse(y_true, y_pred): return mean_squared_error(y_true, y_pred, squared=False)

def train_and_save(train_csv, test_csv, out_dir):
    os.makedirs(out_dir, exist_ok=True)
    train = pd.read_csv(train_csv)
    test = pd.read_csv(test_csv)
    if 'Item_Outlet_Sales' not in train.columns:
        raise ValueError('Processed train must include Item_Outlet_Sales')
    features = [c for c in train.columns if c != 'Item_Outlet_Sales']
    X = train[features].copy()
    X_test = test[features].copy()
    y = train['Item_Outlet_Sales']
    if xgb is None:
        raise ImportError('XGBoost not installed. Install via pip install xgboost')
    # simple train/val split
    X_tr, X_val, y_tr, y_val = train_test_split(X, np.log1p(y), test_size=0.15, random_state=42)
    dtrain = xgb.DMatrix(X_tr, label=y_tr)
    dval = xgb.DMatrix(X_val, label=y_val)
    dtest = xgb.DMatrix(X_test)
    params = {'objective':'reg:squarederror','eval_metric':'rmse','eta':0.05,'max_depth':6,'subsample':0.8,'colsample_bytree':0.8,'seed':42}
    bst = xgb.train(params, dtrain, num_boost_round=500, evals=[(dtrain,'train'),(dval,'valid')], early_stopping_rounds=50, verbose_eval=False)
    preds_test = np.expm1(bst.predict(dtest))
    preds_test = np.where(preds_test < 0, 0, preds_test)
    submission = test[['Item_Identifier','Outlet_Identifier']].copy()
    submission['Item_Outlet_Sales'] = preds_test
    submission.to_csv(os.path.join(out_dir,'bigmart_submission_xgb.csv'), index=False)
    print('Saved XGBoost submission to', out_dir)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--train', required=True)
    parser.add_argument('--test', required=True)
    parser.add_argument('--out_dir', default='outputs')
    args = parser.parse_args()
    train_and_save(args.train, args.test, args.out_dir)
