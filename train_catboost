"""
train_catboost_default.py
Train CatBoost with pre-tuned parameters on processed feature CSVs.
Usage:
    python train_catboost_default.py --train processed/train_features.csv --test processed/test_features.csv --out_dir outputs
"""
import argparse, os
import numpy as np, pandas as pd
from sklearn.model_selection import GroupKFold
from sklearn.metrics import mean_squared_error

try:
    import catboost as cb
except Exception as e:
    cb = None
    print('CatBoost not installed. Install via pip install catboost')

def rmse(y_true, y_pred): return mean_squared_error(y_true, y_pred, squared=False)

def train_and_save(train_csv, test_csv, out_dir):
    os.makedirs(out_dir, exist_ok=True)
    train = pd.read_csv(train_csv)
    test = pd.read_csv(test_csv)
    # separate features and categorical list
    cat_features = [c for c in train.columns if c in ['Item_Identifier','Outlet_Identifier','Item_Fat_Content','Item_Type','Outlet_Size','Outlet_Location_Type','Outlet_Type','Item_Identifier_Prefix']]
    features = [c for c in train.columns if c not in cat_features]
    features = features + cat_features  # ensure cat features present at end
    X = train[features].copy()
    X_test = test[features].copy()
    if 'Item_Outlet_Sales' not in train.columns:
        raise ValueError('Processed train must include Item_Outlet_Sales')
    y = train['Item_Outlet_Sales']
    if cb is None:
        raise ImportError('CatBoost not installed. Install via pip install catboost')
    params = {
        'iterations': 2000,
        'depth': 8,
        'learning_rate': 0.03,
        'l2_leaf_reg': 5.0,
        'random_strength': 1.0,
        'bagging_temperature': 0.2,
        'border_count': 128,
        'grow_policy': 'Lossguide',
        'od_type': 'Iter',
        'od_wait': 100,
        'verbose': 100,
        'random_state': 42
    }
    # GroupKFold CV
    gkf = GroupKFold(n_splits=5)
    rmses = []
    for fold, (tr_idx, val_idx) in enumerate(gkf.split(X, y, groups=train['Outlet_Identifier'])):
        X_tr, X_val = X.iloc[tr_idx], X.iloc[val_idx]
        y_tr, y_val = y.iloc[tr_idx], y.iloc[val_idx]
        train_pool = cb.Pool(X_tr, label=np.log1p(y_tr), cat_features=cat_features)
        val_pool = cb.Pool(X_val, label=np.log1p(y_val), cat_features=cat_features)
        model = cb.CatBoostRegressor(**params)
        model.fit(train_pool, eval_set=val_pool, use_best_model=True, verbose=False)
        preds = np.expm1(model.predict(val_pool))
        score = rmse(y_val, preds)
        print(f'Fold {fold+1} RMSE:', score)
        rmses.append(score)
    print('CV RMSE mean Â± std:', np.mean(rmses), np.std(rmses))
    # Train final on full data
    full_pool = cb.Pool(X, label=np.log1p(y), cat_features=cat_features)
    final_model = cb.CatBoostRegressor(**params)
    final_model.fit(full_pool)
    preds_test = np.expm1(final_model.predict(cb.Pool(X_test, cat_features=cat_features)))
    preds_test = np.where(preds_test < 0, 0, preds_test)
    submission = test[['Item_Identifier','Outlet_Identifier']].copy()
    submission['Item_Outlet_Sales'] = preds_test
    submission.to_csv(os.path.join(out_dir,'bigmart_submission_catboost_default.csv'), index=False)
    # Also save train predictions
    preds_train = np.expm1(final_model.predict(full_pool))
    preds_train = np.where(preds_train < 0, 0, preds_train)
    train_out = train[['Item_Identifier','Outlet_Identifier','Item_Outlet_Sales']].copy().rename(columns={'Item_Outlet_Sales':'Actual_Sales'})
    train_out['Predicted_Sales'] = preds_train
    train_out.to_csv(os.path.join(out_dir,'bigmart_train_predictions_catboost_default.csv'), index=False)
    print('Saved outputs to', out_dir)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--train', required=True)
    parser.add_argument('--test', required=True)
    parser.add_argument('--out_dir', default='outputs')
    args = parser.parse_args()
    train_and_save(args.train, args.test, args.out_dir)
